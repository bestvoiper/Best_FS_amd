üöÄ Comandos para Iniciar la API
1. Inicio Manual
    # Navegar al directorio
    cd /var/www/discador_api

    # Activar entorno virtual
    source venv/bin/activate

    # Iniciar la API
    uvicorn main:app --host 0.0.0.0 --port 8009 --reload

2. Inicio en Segundo Plano
    # Con nohup
    nohup uvicorn main:app --host 0.0.0.0 --port 8009 > /var/log/discador_api.log 2>&1 &

    # Con screen
    screen -S discador_api
    uvicorn main:app --host 0.0.0.0 --port 8009
    # Ctrl+A + D para desconectar


üîß Crear como Servicio Systemd
1. Crear el archivo de servicio
    sudo nano /etc/systemd/system/discador_api.service
2. Contenido del archivo de servicio
    [Unit]
    Description=API Discador FreeSWITCH
    After=network.target mysql.service freeswitch.service
    Wants=mysql.service freeswitch.service

    [Service]
    Type=simple
    User=emanuel
    Group=www-data
    WorkingDirectory=/var/www/discador_api
    Environment=PATH=/var/www/discador_api/venv/bin
    ExecStart=/var/www/discador_api/venv/bin/uvicorn main:app --host 0.0.0.0 --port 8009
    Restart=always
    RestartSec=5
    StandardOutput=journal
    StandardError=journal
    SyslogIdentifier=discador_api

    [Install]
    WantedBy=multi-user.target
3. Habilitar y gestionar el servicio
    # Recargar systemd
    sudo systemctl daemon-reload

    # Habilitar el servicio para inicio autom√°tico
    sudo systemctl enable discador_api

    # Iniciar el servicio
    sudo systemctl start discador_api

    # Verificar estado
    sudo systemctl status discador_api

    # Ver logs en tiempo real
    sudo journalctl -u discador_api -f

    # Reiniciar el servicio
    sudo systemctl restart discador_api

    # Detener el servicio
    sudo systemctl stop discador_api

    # Deshabilitar inicio autom√°tico
    sudo systemctl disable discador_api

üîç Comandos de Diagn√≥stico
Verificar que est√° funcionando
    # Verificar puerto
    sudo netstat -tulpn | grep 8009

    # Verificar proceso
    ps aux | grep uvicorn

    # Test b√°sico
    curl http://localhost:8009/docs

Ver logs
    # Logs del servicio
    sudo journalctl -u discador_api -f

    # Logs de la aplicaci√≥n (si usas nohup)
    tail -f /var/log/discador_api.log

    # Logs de FreeSWITCH
    tail -f /var/log/freeswitch/freeswitch.log

üõ†Ô∏è Script de Inicio Alternativo

Crear un script de inicio
    sudo nano /usr/local/bin/start_discador.sh

    #!/bin/bash

    # Script de inicio para API Discador
    WORKDIR="/var/www/discador_api"
    VENV_PATH="$WORKDIR/venv"
    LOGFILE="/var/log/discador_api.log"

    cd $WORKDIR

    # Activar entorno virtual
    source $VENV_PATH/bin/activate

    # Verificar que MySQL est√° corriendo
    if ! systemctl is-active --quiet mysql; then
        echo "MySQL no est√° corriendo. Iniciando..."
        sudo systemctl start mysql
    fi

    # Verificar que FreeSWITCH est√° corriendo
    if ! systemctl is-active --quiet freeswitch; then
        echo "FreeSWITCH no est√° corriendo. Iniciando..."
        sudo systemctl start freeswitch
    fi

    # Iniciar API
    echo "Iniciando API Discador..."
    uvicorn main:app --host 0.0.0.0 --port 8009 >> $LOGFILE 2>&1 &

    echo "API iniciada. PID: $!"
    echo "Logs disponibles en: $LOGFILE"

Hacer el script ejecutable
    sudo chmod +x /usr/local/bin/start_discador.sh

üìã Comandos R√°pidos de Gesti√≥n

Inicio r√°pido con script
    # Ejecutar script de inicio
    sudo /usr/local/bin/start_discador.sh

    # O crear un alias
    echo 'alias start-discador="sudo /usr/local/bin/start_discador.sh"' >> ~/.bashrc
    source ~/.bashrc
    start-discador

Detener todos los procesos
    # Matar todos los procesos uvicorn
    sudo pkill -f uvicorn

    # O por puerto espec√≠fico
    sudo fuser -k 8009/tcp

üîÑ Auto-reinicio en caso de fallo
Con un script de monitoreo
    sudo nano /usr/local/bin/monitor_discador.sh

    #!/bin/bash

    # Script de monitoreo para API Discador
    API_URL="http://localhost:8009/docs"
    MAX_RETRIES=3
    RETRY_COUNT=0

    while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
        if curl -s $API_URL > /dev/null 2>&1; then
            echo "API est√° corriendo correctamente"
            exit 0
        else
            echo "API no responde. Intento $((RETRY_COUNT + 1)) de $MAX_RETRIES"
            RETRY_COUNT=$((RETRY_COUNT + 1))
            sleep 5
        fi
    done

    echo "API no responde despu√©s de $MAX_RETRIES intentos. Reiniciando..."
    sudo systemctl restart discador_api

Agregar al cron para monitoreo autom√°tico
    # Editar crontab
    crontab -e

    # Agregar l√≠nea para verificar cada 5 minutos
    */5 * * * * /usr/local/bin/monitor_discador.sh

‚úÖ Recomendaci√≥n
    * Para un entorno de producci√≥n, recomiendo usar systemd porque:
    * Se inicia autom√°ticamente al arrancar el sistema
    * Se reinicia autom√°ticamente si falla
    * Manejo profesional de logs
    * Integraci√≥n con el sistema operativo
    * F√°cil gesti√≥n con systemctl
    * El servicio systemd es la opci√≥n m√°s robusta y profesional para mantener tu API funcionando continuamente.